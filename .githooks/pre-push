#!/usr/bin/env bash
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

echo -e "${BLUE}Running pre-push checks...${NC}"

# read push refs from stdin
mapfile -t PUSH_LINES || true

changed_files=""

if [ ${#PUSH_LINES[@]} -eq 0 ]; then
  # no lines => fallback to upstream
  if git rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
    changed_files=$(git diff --name-only @{u}...HEAD || true)
  else
    # new branch without upstream
    changed_files=$(git ls-files || true)
  fi
else
  # process each ref being pushed
  while IFS=' ' read -r local_ref local_sha remote_ref remote_sha; do
    if [[ "$remote_sha" =~ ^0{40}$ ]]; then
      # new branch
      files=$(git diff --name-only --diff-filter=ACM "$(git hash-object -t tree /dev/null)" "$local_sha" || true)
    else
      files=$(git diff --name-only --diff-filter=ACM "$remote_sha..$local_sha" || true)
    fi
    changed_files+=$'\n'"$files"
  done <<< "$(printf '%s\n' "${PUSH_LINES[@]}")"
fi

# deduplicate
changed_files=$(printf '%s\n' "$changed_files" | sed '/^\s*$/d' | sort -u || true)
scala_files=$(printf '%s\n' "$changed_files" | grep '\.scala$' || true)

#if [ -z "$scala_files" ]; then
#    echo -e "${YELLOW}No Scala files to be pushed. Skipping checks.${NC}"
#    exit 0
#fi

errors=0
error_messages=""

run_check() {
    local name="$1"
    local cmd="$2"

    echo -e "\n${YELLOW}Running $name...${NC}"
    output=$(eval "$cmd" 2>&1) || {
        echo -e "${RED}✗ $name failed${NC}"
        error_messages+="
${RED}[$name Error]${NC}
$output
"
        errors=$((errors + 1))
        return 1
    }
    echo -e "${GREEN}✓ $name passed${NC}"
}

run_check "scalafmt" "sbt scalafmtCheckAll"
run_check "scalafix" "sbt 'scalafixAll --check'"
run_check "tests" "sbt test"

if [ $errors -gt 0 ]; then
    echo -e "\n${RED}Push aborted — $errors error(s) found:${NC}"
    echo -e "$error_messages"
    exit 1
else
    echo -e "\n${GREEN}All checks passed. Proceeding with push.${NC}"
fi
